{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MintNewEditionFromMasterEditionViaToken = exports.MintNewEditionFromMasterEditionViaTokenArgs = void 0;\n\nconst mpl_core_1 = require(\"@metaplex-foundation/mpl-core\");\n\nconst spl_token_1 = require(\"@solana/spl-token\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst MetadataProgram_1 = require(\"../MetadataProgram\");\n\nclass MintNewEditionFromMasterEditionViaTokenArgs extends mpl_core_1.Borsh.Data {\n  constructor() {\n    super(...arguments);\n    this.instruction = 11;\n  }\n\n}\n\nexports.MintNewEditionFromMasterEditionViaTokenArgs = MintNewEditionFromMasterEditionViaTokenArgs;\nMintNewEditionFromMasterEditionViaTokenArgs.SCHEMA = MintNewEditionFromMasterEditionViaTokenArgs.struct([['instruction', 'u8'], ['edition', 'u64']]);\n\nclass MintNewEditionFromMasterEditionViaToken extends mpl_core_1.Transaction {\n  constructor(options, params) {\n    super(options);\n    const {\n      feePayer\n    } = options;\n    const {\n      edition,\n      metadata,\n      updateAuthority,\n      masterEdition,\n      masterMetadata,\n      mint,\n      editionMarker,\n      mintAuthority,\n      tokenOwner,\n      tokenAccount,\n      editionValue\n    } = params;\n    const data = MintNewEditionFromMasterEditionViaTokenArgs.serialize({\n      edition: editionValue\n    });\n    this.add(new web3_js_1.TransactionInstruction({\n      keys: [{\n        pubkey: metadata,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: edition,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: masterEdition,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: mint,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: editionMarker,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: mintAuthority,\n        isSigner: true,\n        isWritable: false\n      }, {\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: false\n      }, {\n        pubkey: tokenOwner,\n        isSigner: true,\n        isWritable: false\n      }, {\n        pubkey: tokenAccount,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: updateAuthority,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: masterMetadata,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: spl_token_1.TOKEN_PROGRAM_ID,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: web3_js_1.SystemProgram.programId,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: MetadataProgram_1.MetadataProgram.PUBKEY,\n      data\n    }));\n  }\n\n}\n\nexports.MintNewEditionFromMasterEditionViaToken = MintNewEditionFromMasterEditionViaToken;","map":{"version":3,"sources":["../../../src/transactions/MintNewEditionFromMasterEditionViaToken.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MintNewEditionFromMasterEditionViaToken = exports.MintNewEditionFromMasterEditionViaTokenArgs = void 0;\nconst mpl_core_1 = require(\"@metaplex-foundation/mpl-core\");\nconst spl_token_1 = require(\"@solana/spl-token\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst MetadataProgram_1 = require(\"../MetadataProgram\");\nclass MintNewEditionFromMasterEditionViaTokenArgs extends mpl_core_1.Borsh.Data {\n    constructor() {\n        super(...arguments);\n        this.instruction = 11;\n    }\n}\nexports.MintNewEditionFromMasterEditionViaTokenArgs = MintNewEditionFromMasterEditionViaTokenArgs;\nMintNewEditionFromMasterEditionViaTokenArgs.SCHEMA = MintNewEditionFromMasterEditionViaTokenArgs.struct([\n    ['instruction', 'u8'],\n    ['edition', 'u64'],\n]);\nclass MintNewEditionFromMasterEditionViaToken extends mpl_core_1.Transaction {\n    constructor(options, params) {\n        super(options);\n        const { feePayer } = options;\n        const { edition, metadata, updateAuthority, masterEdition, masterMetadata, mint, editionMarker, mintAuthority, tokenOwner, tokenAccount, editionValue, } = params;\n        const data = MintNewEditionFromMasterEditionViaTokenArgs.serialize({\n            edition: editionValue,\n        });\n        this.add(new web3_js_1.TransactionInstruction({\n            keys: [\n                {\n                    pubkey: metadata,\n                    isSigner: false,\n                    isWritable: true,\n                },\n                {\n                    pubkey: edition,\n                    isSigner: false,\n                    isWritable: true,\n                },\n                {\n                    pubkey: masterEdition,\n                    isSigner: false,\n                    isWritable: true,\n                },\n                {\n                    pubkey: mint,\n                    isSigner: false,\n                    isWritable: true,\n                },\n                {\n                    pubkey: editionMarker,\n                    isSigner: false,\n                    isWritable: true,\n                },\n                {\n                    pubkey: mintAuthority,\n                    isSigner: true,\n                    isWritable: false,\n                },\n                {\n                    pubkey: feePayer,\n                    isSigner: true,\n                    isWritable: false,\n                },\n                {\n                    pubkey: tokenOwner,\n                    isSigner: true,\n                    isWritable: false,\n                },\n                {\n                    pubkey: tokenAccount,\n                    isSigner: false,\n                    isWritable: false,\n                },\n                {\n                    pubkey: updateAuthority,\n                    isSigner: false,\n                    isWritable: false,\n                },\n                {\n                    pubkey: masterMetadata,\n                    isSigner: false,\n                    isWritable: false,\n                },\n                {\n                    pubkey: spl_token_1.TOKEN_PROGRAM_ID,\n                    isSigner: false,\n                    isWritable: false,\n                },\n                {\n                    pubkey: web3_js_1.SystemProgram.programId,\n                    isSigner: false,\n                    isWritable: false,\n                },\n                {\n                    pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\n                    isSigner: false,\n                    isWritable: false,\n                },\n            ],\n            programId: MetadataProgram_1.MetadataProgram.PUBKEY,\n            data,\n        }));\n    }\n}\nexports.MintNewEditionFromMasterEditionViaToken = MintNewEditionFromMasterEditionViaToken;\n//# sourceMappingURL=MintNewEditionFromMasterEditionViaToken.js.map"]},"metadata":{},"sourceType":"script"}