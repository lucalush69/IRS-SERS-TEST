{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BidderPot = exports.BidderPotData = void 0;\n\nconst mpl_core_1 = require(\"@metaplex-foundation/mpl-core\");\n\nconst AuctionProgram_1 = require(\"../AuctionProgram\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst buffer_1 = require(\"buffer\");\n\nclass BidderPotData extends mpl_core_1.Borsh.Data {}\n\nexports.BidderPotData = BidderPotData;\nBidderPotData.SCHEMA = BidderPotData.struct([['bidderPot', 'pubkeyAsString'], ['bidderAct', 'pubkeyAsString'], ['auctionAct', 'pubkeyAsString'], ['emptied', 'u8']]);\n\nclass BidderPot extends mpl_core_1.Account {\n  constructor(key, info) {\n    super(key, info);\n\n    if (!this.assertOwner(AuctionProgram_1.AuctionProgram.PUBKEY)) {\n      throw (0, mpl_core_1.ERROR_INVALID_OWNER)();\n    }\n\n    if (!BidderPot.isCompatible(this.info.data)) {\n      throw (0, mpl_core_1.ERROR_INVALID_ACCOUNT_DATA)();\n    }\n\n    this.data = BidderPotData.deserialize(this.info.data);\n  }\n\n  static isCompatible(data) {\n    return data.length === BidderPot.DATA_SIZE;\n  }\n\n  static getPDA(auction, bidder) {\n    return AuctionProgram_1.AuctionProgram.findProgramAddress([buffer_1.Buffer.from(AuctionProgram_1.AuctionProgram.PREFIX), AuctionProgram_1.AuctionProgram.PUBKEY.toBuffer(), new web3_js_1.PublicKey(auction).toBuffer(), new web3_js_1.PublicKey(bidder).toBuffer()]);\n  }\n\n}\n\nexports.BidderPot = BidderPot;\nBidderPot.DATA_SIZE = 32 + 32 + 32 + 1;","map":{"version":3,"sources":["../../../src/accounts/BidderPot.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,UAAA,GAAA,OAAA,CAAA,+BAAA,CAAA;;AAQA,MAAA,gBAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AACA,MAAA,SAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,MAAA,QAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AAQA,MAAa,aAAb,SAAmC,UAAA,CAAA,KAAA,CAAM,IAAzC,CAAmD;;AAAnD,OAAA,CAAA,aAAA,GAAA,aAAA;AACkB,aAAA,CAAA,MAAA,GAAS,aAAa,CAAC,MAAd,CAAqB,CAC5C,CAAC,WAAD,EAAc,gBAAd,CAD4C,EAE5C,CAAC,WAAD,EAAc,gBAAd,CAF4C,EAG5C,CAAC,YAAD,EAAe,gBAAf,CAH4C,EAI5C,CAAC,SAAD,EAAY,IAAZ,CAJ4C,CAArB,CAAT;;AAiBlB,MAAa,SAAb,SAA+B,UAAA,CAAA,OAA/B,CAAqD;AAGnD,EAAA,WAAA,CAAY,GAAZ,EAA+B,IAA/B,EAAwD;AACtD,UAAM,GAAN,EAAW,IAAX;;AAEA,QAAI,CAAC,KAAK,WAAL,CAAiB,gBAAA,CAAA,cAAA,CAAe,MAAhC,CAAL,EAA8C;AAC5C,YAAM,CAAA,GAAA,UAAA,CAAA,mBAAA,GAAN;AACD;;AAED,QAAI,CAAC,SAAS,CAAC,YAAV,CAAuB,KAAK,IAAL,CAAU,IAAjC,CAAL,EAA6C;AAC3C,YAAM,CAAA,GAAA,UAAA,CAAA,0BAAA,GAAN;AACD;;AAED,SAAK,IAAL,GAAY,aAAa,CAAC,WAAd,CAA0B,KAAK,IAAL,CAAU,IAApC,CAAZ;AACD;;AAEkB,SAAZ,YAAY,CAAC,IAAD,EAAa;AAC9B,WAAO,IAAI,CAAC,MAAL,KAAgB,SAAS,CAAC,SAAjC;AACD;;AAEY,SAAN,MAAM,CAAC,OAAD,EAAwB,MAAxB,EAA4C;AACvD,WAAO,gBAAA,CAAA,cAAA,CAAe,kBAAf,CAAkC,CACvC,QAAA,CAAA,MAAA,CAAO,IAAP,CAAY,gBAAA,CAAA,cAAA,CAAe,MAA3B,CADuC,EAEvC,gBAAA,CAAA,cAAA,CAAe,MAAf,CAAsB,QAAtB,EAFuC,EAGvC,IAAI,SAAA,CAAA,SAAJ,CAAc,OAAd,EAAuB,QAAvB,EAHuC,EAIvC,IAAI,SAAA,CAAA,SAAJ,CAAc,MAAd,EAAsB,QAAtB,EAJuC,CAAlC,CAAP;AAMD;;AA5BkD;;AAArD,OAAA,CAAA,SAAA,GAAA,SAAA;AACkB,SAAA,CAAA,SAAA,GAAY,KAAK,EAAL,GAAU,EAAV,GAAe,CAA3B","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BidderPot = exports.BidderPotData = void 0;\nconst mpl_core_1 = require(\"@metaplex-foundation/mpl-core\");\nconst AuctionProgram_1 = require(\"../AuctionProgram\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst buffer_1 = require(\"buffer\");\nclass BidderPotData extends mpl_core_1.Borsh.Data {\n}\nexports.BidderPotData = BidderPotData;\nBidderPotData.SCHEMA = BidderPotData.struct([\n    ['bidderPot', 'pubkeyAsString'],\n    ['bidderAct', 'pubkeyAsString'],\n    ['auctionAct', 'pubkeyAsString'],\n    ['emptied', 'u8'],\n]);\nclass BidderPot extends mpl_core_1.Account {\n    constructor(key, info) {\n        super(key, info);\n        if (!this.assertOwner(AuctionProgram_1.AuctionProgram.PUBKEY)) {\n            throw (0, mpl_core_1.ERROR_INVALID_OWNER)();\n        }\n        if (!BidderPot.isCompatible(this.info.data)) {\n            throw (0, mpl_core_1.ERROR_INVALID_ACCOUNT_DATA)();\n        }\n        this.data = BidderPotData.deserialize(this.info.data);\n    }\n    static isCompatible(data) {\n        return data.length === BidderPot.DATA_SIZE;\n    }\n    static getPDA(auction, bidder) {\n        return AuctionProgram_1.AuctionProgram.findProgramAddress([\n            buffer_1.Buffer.from(AuctionProgram_1.AuctionProgram.PREFIX),\n            AuctionProgram_1.AuctionProgram.PUBKEY.toBuffer(),\n            new web3_js_1.PublicKey(auction).toBuffer(),\n            new web3_js_1.PublicKey(bidder).toBuffer(),\n        ]);\n    }\n}\nexports.BidderPot = BidderPot;\nBidderPot.DATA_SIZE = 32 + 32 + 32 + 1;\n//# sourceMappingURL=BidderPot.js.map"]},"metadata":{},"sourceType":"script"}