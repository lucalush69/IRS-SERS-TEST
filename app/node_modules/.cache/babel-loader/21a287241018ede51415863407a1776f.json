{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Auction = exports.AuctionData = exports.PriceFloor = exports.BidState = exports.Bid = exports.PriceFloorType = exports.BidStateType = exports.AuctionState = void 0;\n\nconst mpl_core_1 = require(\"@metaplex-foundation/mpl-core\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\n\nconst buffer_1 = require(\"buffer\");\n\nconst AuctionProgram_1 = require(\"../AuctionProgram\");\n\nconst BidderMetadata_1 = require(\"./BidderMetadata\");\n\nconst BidderPot_1 = require(\"./BidderPot\");\n\nvar AuctionState;\n\n(function (AuctionState) {\n  AuctionState[AuctionState[\"Created\"] = 0] = \"Created\";\n  AuctionState[AuctionState[\"Started\"] = 1] = \"Started\";\n  AuctionState[AuctionState[\"Ended\"] = 2] = \"Ended\";\n})(AuctionState = exports.AuctionState || (exports.AuctionState = {}));\n\nvar BidStateType;\n\n(function (BidStateType) {\n  BidStateType[BidStateType[\"EnglishAuction\"] = 0] = \"EnglishAuction\";\n  BidStateType[BidStateType[\"OpenEdition\"] = 1] = \"OpenEdition\";\n})(BidStateType = exports.BidStateType || (exports.BidStateType = {}));\n\nvar PriceFloorType;\n\n(function (PriceFloorType) {\n  PriceFloorType[PriceFloorType[\"None\"] = 0] = \"None\";\n  PriceFloorType[PriceFloorType[\"Minimum\"] = 1] = \"Minimum\";\n  PriceFloorType[PriceFloorType[\"BlindedPrice\"] = 2] = \"BlindedPrice\";\n})(PriceFloorType = exports.PriceFloorType || (exports.PriceFloorType = {}));\n\nclass Bid extends mpl_core_1.Borsh.Data {}\n\nexports.Bid = Bid;\nBid.SCHEMA = Bid.struct([['key', 'pubkeyAsString'], ['amount', 'u64']]);\n\nclass BidState extends mpl_core_1.Borsh.Data {\n  getWinnerAt(winnerIndex) {\n    const convertedIndex = this.bids.length - winnerIndex - 1;\n\n    if (convertedIndex >= 0 && convertedIndex < this.bids.length) {\n      return this.bids[convertedIndex].key;\n    } else {\n      return null;\n    }\n  }\n\n  getAmountAt(winnerIndex) {\n    const convertedIndex = this.bids.length - winnerIndex - 1;\n\n    if (convertedIndex >= 0 && convertedIndex < this.bids.length) {\n      return this.bids[convertedIndex].amount;\n    } else {\n      return null;\n    }\n  }\n\n  getWinnerIndex(bidder) {\n    if (!this.bids) {\n      return null;\n    }\n\n    const index = this.bids.findIndex(b => b.key === bidder);\n\n    if (index !== -1) {\n      const zeroBased = this.bids.length - index - 1;\n      return zeroBased < this.max.toNumber() ? zeroBased : null;\n    }\n\n    return null;\n  }\n\n}\n\nexports.BidState = BidState;\nBidState.SCHEMA = new Map([...Bid.SCHEMA, ...BidState.struct([['type', 'u8'], ['bids', [Bid]], ['max', 'u64']])]);\n\nclass PriceFloor extends mpl_core_1.Borsh.Data {\n  constructor(args) {\n    super();\n    this.type = args.type;\n    this.hash = args.hash || new Uint8Array(32);\n\n    if (this.type === PriceFloorType.Minimum) {\n      if (args.minPrice) {\n        this.hash.set(args.minPrice.toArrayLike(buffer_1.Buffer, 'le', 8), 0);\n      } else {\n        this.minPrice = new bn_js_1.default((args.hash || new Uint8Array(0)).slice(0, 8), 'le');\n      }\n    }\n  }\n\n}\n\nexports.PriceFloor = PriceFloor;\nPriceFloor.SCHEMA = PriceFloor.struct([['type', 'u8'], ['hash', [32]]]);\n\nclass AuctionData extends mpl_core_1.Borsh.Data {}\n\nexports.AuctionData = AuctionData;\nAuctionData.SCHEMA = new Map([...BidState.SCHEMA, ...PriceFloor.SCHEMA, ...AuctionData.struct([['authority', 'pubkeyAsString'], ['tokenMint', 'pubkeyAsString'], ['lastBid', {\n  kind: 'option',\n  type: 'u64'\n}], ['endedAt', {\n  kind: 'option',\n  type: 'u64'\n}], ['endAuctionAt', {\n  kind: 'option',\n  type: 'u64'\n}], ['auctionGap', {\n  kind: 'option',\n  type: 'u64'\n}], ['priceFloor', PriceFloor], ['state', 'u8'], ['bidState', BidState]])]);\n\nclass Auction extends mpl_core_1.Account {\n  constructor(pubkey, info) {\n    super(pubkey, info);\n\n    if (!this.assertOwner(AuctionProgram_1.AuctionProgram.PUBKEY)) {\n      throw (0, mpl_core_1.ERROR_INVALID_OWNER)();\n    }\n\n    this.data = AuctionData.deserialize(this.info.data);\n  }\n\n  static getPDA(vault) {\n    return AuctionProgram_1.AuctionProgram.findProgramAddress([buffer_1.Buffer.from(AuctionProgram_1.AuctionProgram.PREFIX), AuctionProgram_1.AuctionProgram.PUBKEY.toBuffer(), new web3_js_1.PublicKey(vault).toBuffer()]);\n  }\n\n  static findMany(connection) {\n    let filters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return __awaiter(this, void 0, void 0, function* () {\n      return (yield AuctionProgram_1.AuctionProgram.getProgramAccounts(connection, {\n        filters: [filters.authority && {\n          memcmp: {\n            offset: 0,\n            bytes: new web3_js_1.PublicKey(filters.authority).toBase58()\n          }\n        }].filter(Boolean)\n      })).map(account => {\n        try {\n          return Auction.from(account);\n        } catch (err) {}\n      }).filter(Boolean);\n    });\n  }\n\n  getBidderPots(connection) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return (yield AuctionProgram_1.AuctionProgram.getProgramAccounts(connection, {\n        filters: [{\n          dataSize: BidderPot_1.BidderPot.DATA_SIZE\n        }, {\n          memcmp: {\n            offset: 32 + 32,\n            bytes: this.pubkey.toBase58()\n          }\n        }]\n      })).map(account => BidderPot_1.BidderPot.from(account));\n    });\n  }\n\n  getBidderMetadata(connection) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return (yield AuctionProgram_1.AuctionProgram.getProgramAccounts(connection, {\n        filters: [{\n          dataSize: BidderMetadata_1.BidderMetadata.DATA_SIZE\n        }, {\n          memcmp: {\n            offset: 32,\n            bytes: this.pubkey.toBase58()\n          }\n        }]\n      })).map(account => BidderMetadata_1.BidderMetadata.from(account));\n    });\n  }\n\n}\n\nexports.Auction = Auction;\nAuction.EXTENDED_DATA_SIZE = 8 + 9 + 2 + 200;","map":{"version":3,"sources":["../../../src/accounts/Auction.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Auction = exports.AuctionData = exports.PriceFloor = exports.BidState = exports.Bid = exports.PriceFloorType = exports.BidStateType = exports.AuctionState = void 0;\nconst mpl_core_1 = require(\"@metaplex-foundation/mpl-core\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst buffer_1 = require(\"buffer\");\nconst AuctionProgram_1 = require(\"../AuctionProgram\");\nconst BidderMetadata_1 = require(\"./BidderMetadata\");\nconst BidderPot_1 = require(\"./BidderPot\");\nvar AuctionState;\n(function (AuctionState) {\n    AuctionState[AuctionState[\"Created\"] = 0] = \"Created\";\n    AuctionState[AuctionState[\"Started\"] = 1] = \"Started\";\n    AuctionState[AuctionState[\"Ended\"] = 2] = \"Ended\";\n})(AuctionState = exports.AuctionState || (exports.AuctionState = {}));\nvar BidStateType;\n(function (BidStateType) {\n    BidStateType[BidStateType[\"EnglishAuction\"] = 0] = \"EnglishAuction\";\n    BidStateType[BidStateType[\"OpenEdition\"] = 1] = \"OpenEdition\";\n})(BidStateType = exports.BidStateType || (exports.BidStateType = {}));\nvar PriceFloorType;\n(function (PriceFloorType) {\n    PriceFloorType[PriceFloorType[\"None\"] = 0] = \"None\";\n    PriceFloorType[PriceFloorType[\"Minimum\"] = 1] = \"Minimum\";\n    PriceFloorType[PriceFloorType[\"BlindedPrice\"] = 2] = \"BlindedPrice\";\n})(PriceFloorType = exports.PriceFloorType || (exports.PriceFloorType = {}));\nclass Bid extends mpl_core_1.Borsh.Data {\n}\nexports.Bid = Bid;\nBid.SCHEMA = Bid.struct([\n    ['key', 'pubkeyAsString'],\n    ['amount', 'u64'],\n]);\nclass BidState extends mpl_core_1.Borsh.Data {\n    getWinnerAt(winnerIndex) {\n        const convertedIndex = this.bids.length - winnerIndex - 1;\n        if (convertedIndex >= 0 && convertedIndex < this.bids.length) {\n            return this.bids[convertedIndex].key;\n        }\n        else {\n            return null;\n        }\n    }\n    getAmountAt(winnerIndex) {\n        const convertedIndex = this.bids.length - winnerIndex - 1;\n        if (convertedIndex >= 0 && convertedIndex < this.bids.length) {\n            return this.bids[convertedIndex].amount;\n        }\n        else {\n            return null;\n        }\n    }\n    getWinnerIndex(bidder) {\n        if (!this.bids) {\n            return null;\n        }\n        const index = this.bids.findIndex((b) => b.key === bidder);\n        if (index !== -1) {\n            const zeroBased = this.bids.length - index - 1;\n            return zeroBased < this.max.toNumber() ? zeroBased : null;\n        }\n        return null;\n    }\n}\nexports.BidState = BidState;\nBidState.SCHEMA = new Map([\n    ...Bid.SCHEMA,\n    ...BidState.struct([\n        ['type', 'u8'],\n        ['bids', [Bid]],\n        ['max', 'u64'],\n    ]),\n]);\nclass PriceFloor extends mpl_core_1.Borsh.Data {\n    constructor(args) {\n        super();\n        this.type = args.type;\n        this.hash = args.hash || new Uint8Array(32);\n        if (this.type === PriceFloorType.Minimum) {\n            if (args.minPrice) {\n                this.hash.set(args.minPrice.toArrayLike(buffer_1.Buffer, 'le', 8), 0);\n            }\n            else {\n                this.minPrice = new bn_js_1.default((args.hash || new Uint8Array(0)).slice(0, 8), 'le');\n            }\n        }\n    }\n}\nexports.PriceFloor = PriceFloor;\nPriceFloor.SCHEMA = PriceFloor.struct([\n    ['type', 'u8'],\n    ['hash', [32]],\n]);\nclass AuctionData extends mpl_core_1.Borsh.Data {\n}\nexports.AuctionData = AuctionData;\nAuctionData.SCHEMA = new Map([\n    ...BidState.SCHEMA,\n    ...PriceFloor.SCHEMA,\n    ...AuctionData.struct([\n        ['authority', 'pubkeyAsString'],\n        ['tokenMint', 'pubkeyAsString'],\n        ['lastBid', { kind: 'option', type: 'u64' }],\n        ['endedAt', { kind: 'option', type: 'u64' }],\n        ['endAuctionAt', { kind: 'option', type: 'u64' }],\n        ['auctionGap', { kind: 'option', type: 'u64' }],\n        ['priceFloor', PriceFloor],\n        ['state', 'u8'],\n        ['bidState', BidState],\n    ]),\n]);\nclass Auction extends mpl_core_1.Account {\n    constructor(pubkey, info) {\n        super(pubkey, info);\n        if (!this.assertOwner(AuctionProgram_1.AuctionProgram.PUBKEY)) {\n            throw (0, mpl_core_1.ERROR_INVALID_OWNER)();\n        }\n        this.data = AuctionData.deserialize(this.info.data);\n    }\n    static getPDA(vault) {\n        return AuctionProgram_1.AuctionProgram.findProgramAddress([\n            buffer_1.Buffer.from(AuctionProgram_1.AuctionProgram.PREFIX),\n            AuctionProgram_1.AuctionProgram.PUBKEY.toBuffer(),\n            new web3_js_1.PublicKey(vault).toBuffer(),\n        ]);\n    }\n    static findMany(connection, filters = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return (yield AuctionProgram_1.AuctionProgram.getProgramAccounts(connection, {\n                filters: [\n                    filters.authority && {\n                        memcmp: {\n                            offset: 0,\n                            bytes: new web3_js_1.PublicKey(filters.authority).toBase58(),\n                        },\n                    },\n                ].filter(Boolean),\n            }))\n                .map((account) => {\n                try {\n                    return Auction.from(account);\n                }\n                catch (err) { }\n            })\n                .filter(Boolean);\n        });\n    }\n    getBidderPots(connection) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return (yield AuctionProgram_1.AuctionProgram.getProgramAccounts(connection, {\n                filters: [\n                    {\n                        dataSize: BidderPot_1.BidderPot.DATA_SIZE,\n                    },\n                    {\n                        memcmp: {\n                            offset: 32 + 32,\n                            bytes: this.pubkey.toBase58(),\n                        },\n                    },\n                ],\n            })).map((account) => BidderPot_1.BidderPot.from(account));\n        });\n    }\n    getBidderMetadata(connection) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return (yield AuctionProgram_1.AuctionProgram.getProgramAccounts(connection, {\n                filters: [\n                    {\n                        dataSize: BidderMetadata_1.BidderMetadata.DATA_SIZE,\n                    },\n                    {\n                        memcmp: {\n                            offset: 32,\n                            bytes: this.pubkey.toBase58(),\n                        },\n                    },\n                ],\n            })).map((account) => BidderMetadata_1.BidderMetadata.from(account));\n        });\n    }\n}\nexports.Auction = Auction;\nAuction.EXTENDED_DATA_SIZE = 8 + 9 + 2 + 200;\n//# sourceMappingURL=Auction.js.map"]},"metadata":{},"sourceType":"script"}