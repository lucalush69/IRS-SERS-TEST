{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BidderMetadata = exports.BidderMetadataData = void 0;\n\nconst mpl_core_1 = require(\"@metaplex-foundation/mpl-core\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst AuctionProgram_1 = require(\"../AuctionProgram\");\n\nconst buffer_1 = require(\"buffer\");\n\nclass BidderMetadataData extends mpl_core_1.Borsh.Data {}\n\nexports.BidderMetadataData = BidderMetadataData;\nBidderMetadataData.SCHEMA = BidderMetadataData.struct([['bidderPubkey', 'pubkeyAsString'], ['auctionPubkey', 'pubkeyAsString'], ['lastBid', 'u64'], ['lastBidTimestamp', 'u64'], ['cancelled', 'u8']]);\n\nclass BidderMetadata extends mpl_core_1.Account {\n  constructor(key, info) {\n    super(key, info);\n\n    if (!this.assertOwner(AuctionProgram_1.AuctionProgram.PUBKEY)) {\n      throw (0, mpl_core_1.ERROR_INVALID_OWNER)();\n    }\n\n    if (!BidderMetadata.isCompatible(this.info.data)) {\n      throw (0, mpl_core_1.ERROR_INVALID_ACCOUNT_DATA)();\n    }\n\n    this.data = BidderMetadataData.deserialize(this.info.data);\n  }\n\n  static isCompatible(data) {\n    return data.length === BidderMetadata.DATA_SIZE;\n  }\n\n  static getPDA(auction, bidder) {\n    return AuctionProgram_1.AuctionProgram.findProgramAddress([buffer_1.Buffer.from(AuctionProgram_1.AuctionProgram.PREFIX), AuctionProgram_1.AuctionProgram.PUBKEY.toBuffer(), new web3_js_1.PublicKey(auction).toBuffer(), new web3_js_1.PublicKey(bidder).toBuffer(), buffer_1.Buffer.from('metadata')]);\n  }\n\n}\n\nexports.BidderMetadata = BidderMetadata;\nBidderMetadata.DATA_SIZE = 32 + 32 + 8 + 8 + 1;","map":{"version":3,"sources":["../../../src/accounts/BidderMetadata.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,UAAA,GAAA,OAAA,CAAA,+BAAA,CAAA;;AAQA,MAAA,SAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AAEA,MAAA,gBAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AACA,MAAA,QAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AASA,MAAa,kBAAb,SAAwC,UAAA,CAAA,KAAA,CAAM,IAA9C,CAAwD;;AAAxD,OAAA,CAAA,kBAAA,GAAA,kBAAA;AACkB,kBAAA,CAAA,MAAA,GAAS,kBAAkB,CAAC,MAAnB,CAA0B,CACjD,CAAC,cAAD,EAAiB,gBAAjB,CADiD,EAEjD,CAAC,eAAD,EAAkB,gBAAlB,CAFiD,EAGjD,CAAC,SAAD,EAAY,KAAZ,CAHiD,EAIjD,CAAC,kBAAD,EAAqB,KAArB,CAJiD,EAKjD,CAAC,WAAD,EAAc,IAAd,CALiD,CAA1B,CAAT;;AAqBlB,MAAa,cAAb,SAAoC,UAAA,CAAA,OAApC,CAA+D;AAG7D,EAAA,WAAA,CAAY,GAAZ,EAA+B,IAA/B,EAAwD;AACtD,UAAM,GAAN,EAAW,IAAX;;AAEA,QAAI,CAAC,KAAK,WAAL,CAAiB,gBAAA,CAAA,cAAA,CAAe,MAAhC,CAAL,EAA8C;AAC5C,YAAM,CAAA,GAAA,UAAA,CAAA,mBAAA,GAAN;AACD;;AAED,QAAI,CAAC,cAAc,CAAC,YAAf,CAA4B,KAAK,IAAL,CAAU,IAAtC,CAAL,EAAkD;AAChD,YAAM,CAAA,GAAA,UAAA,CAAA,0BAAA,GAAN;AACD;;AAED,SAAK,IAAL,GAAY,kBAAkB,CAAC,WAAnB,CAA+B,KAAK,IAAL,CAAU,IAAzC,CAAZ;AACD;;AAEkB,SAAZ,YAAY,CAAC,IAAD,EAAa;AAC9B,WAAO,IAAI,CAAC,MAAL,KAAgB,cAAc,CAAC,SAAtC;AACD;;AAEY,SAAN,MAAM,CAAC,OAAD,EAAwB,MAAxB,EAA4C;AACvD,WAAO,gBAAA,CAAA,cAAA,CAAe,kBAAf,CAAkC,CACvC,QAAA,CAAA,MAAA,CAAO,IAAP,CAAY,gBAAA,CAAA,cAAA,CAAe,MAA3B,CADuC,EAEvC,gBAAA,CAAA,cAAA,CAAe,MAAf,CAAsB,QAAtB,EAFuC,EAGvC,IAAI,SAAA,CAAA,SAAJ,CAAc,OAAd,EAAuB,QAAvB,EAHuC,EAIvC,IAAI,SAAA,CAAA,SAAJ,CAAc,MAAd,EAAsB,QAAtB,EAJuC,EAKvC,QAAA,CAAA,MAAA,CAAO,IAAP,CAAY,UAAZ,CALuC,CAAlC,CAAP;AAOD;;AA7B4D;;AAA/D,OAAA,CAAA,cAAA,GAAA,cAAA;AACkB,cAAA,CAAA,SAAA,GAAY,KAAK,EAAL,GAAU,CAAV,GAAc,CAAd,GAAkB,CAA9B","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BidderMetadata = exports.BidderMetadataData = void 0;\nconst mpl_core_1 = require(\"@metaplex-foundation/mpl-core\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst AuctionProgram_1 = require(\"../AuctionProgram\");\nconst buffer_1 = require(\"buffer\");\nclass BidderMetadataData extends mpl_core_1.Borsh.Data {\n}\nexports.BidderMetadataData = BidderMetadataData;\nBidderMetadataData.SCHEMA = BidderMetadataData.struct([\n    ['bidderPubkey', 'pubkeyAsString'],\n    ['auctionPubkey', 'pubkeyAsString'],\n    ['lastBid', 'u64'],\n    ['lastBidTimestamp', 'u64'],\n    ['cancelled', 'u8'],\n]);\nclass BidderMetadata extends mpl_core_1.Account {\n    constructor(key, info) {\n        super(key, info);\n        if (!this.assertOwner(AuctionProgram_1.AuctionProgram.PUBKEY)) {\n            throw (0, mpl_core_1.ERROR_INVALID_OWNER)();\n        }\n        if (!BidderMetadata.isCompatible(this.info.data)) {\n            throw (0, mpl_core_1.ERROR_INVALID_ACCOUNT_DATA)();\n        }\n        this.data = BidderMetadataData.deserialize(this.info.data);\n    }\n    static isCompatible(data) {\n        return data.length === BidderMetadata.DATA_SIZE;\n    }\n    static getPDA(auction, bidder) {\n        return AuctionProgram_1.AuctionProgram.findProgramAddress([\n            buffer_1.Buffer.from(AuctionProgram_1.AuctionProgram.PREFIX),\n            AuctionProgram_1.AuctionProgram.PUBKEY.toBuffer(),\n            new web3_js_1.PublicKey(auction).toBuffer(),\n            new web3_js_1.PublicKey(bidder).toBuffer(),\n            buffer_1.Buffer.from('metadata'),\n        ]);\n    }\n}\nexports.BidderMetadata = BidderMetadata;\nBidderMetadata.DATA_SIZE = 32 + 32 + 8 + 8 + 1;\n//# sourceMappingURL=BidderMetadata.js.map"]},"metadata":{},"sourceType":"script"}