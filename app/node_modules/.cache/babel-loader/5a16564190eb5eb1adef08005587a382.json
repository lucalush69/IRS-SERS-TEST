{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WithdrawSharesFromTreasury = void 0;\n\nconst mpl_core_1 = require(\"@metaplex-foundation/mpl-core\");\n\nconst spl_token_1 = require(\"@solana/spl-token\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst VaultProgram_1 = require(\"../VaultProgram\");\n\nconst Vault_1 = require(\"../accounts/Vault\");\n\nconst VaultProgram_2 = require(\"../VaultProgram\");\n\nclass WithdrawSharesFromTreasury extends mpl_core_1.Transaction {\n  constructor(options, params) {\n    super(options);\n    const {\n      vault,\n      vaultAuthority,\n      destination,\n      transferAuthority,\n      fractionTreasury,\n      numberOfShares\n    } = params;\n    const data = Vault_1.NumberOfShareArgs.serialize({\n      instruction: VaultProgram_1.VaultInstructions.WithdrawSharesFromTreasury,\n      numberOfShares\n    });\n    this.add(new web3_js_1.TransactionInstruction({\n      keys: [{\n        pubkey: destination,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: fractionTreasury,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: vault,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: transferAuthority,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: vaultAuthority,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: spl_token_1.TOKEN_PROGRAM_ID,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: VaultProgram_2.VaultProgram.PUBKEY,\n      data\n    }));\n  }\n\n}\n\nexports.WithdrawSharesFromTreasury = WithdrawSharesFromTreasury;","map":{"version":3,"sources":["../../../src/transactions/WithdrawSharesFromTreasury.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,UAAA,GAAA,OAAA,CAAA,+BAAA,CAAA;;AACA,MAAA,WAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AACA,MAAA,SAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AAOA,MAAA,cAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AACA,MAAA,cAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AAYA,MAAa,0BAAb,SAAgD,UAAA,CAAA,WAAhD,CAA2D;AACzD,EAAA,WAAA,CACE,OADF,EAEE,MAFF,EAE2D;AAEzD,UAAM,OAAN;AACA,UAAM;AACJ,MAAA,KADI;AAEJ,MAAA,cAFI;AAGJ,MAAA,WAHI;AAIJ,MAAA,iBAJI;AAKJ,MAAA,gBALI;AAMJ,MAAA;AANI,QAOF,MAPJ;AASA,UAAM,IAAI,GAAG,OAAA,CAAA,iBAAA,CAAkB,SAAlB,CAA4B;AACvC,MAAA,WAAW,EAAE,cAAA,CAAA,iBAAA,CAAkB,0BADQ;AAEvC,MAAA;AAFuC,KAA5B,CAAb;AAKA,SAAK,GAAL,CACE,IAAI,SAAA,CAAA,sBAAJ,CAA2B;AACzB,MAAA,IAAI,EAAE,CACJ;AACE,QAAA,MAAM,EAAE,WADV;AAEE,QAAA,QAAQ,EAAE,KAFZ;AAGE,QAAA,UAAU,EAAE;AAHd,OADI,EAMJ;AACE,QAAA,MAAM,EAAE,gBADV;AAEE,QAAA,QAAQ,EAAE,KAFZ;AAGE,QAAA,UAAU,EAAE;AAHd,OANI,EAWJ;AACE,QAAA,MAAM,EAAE,KADV;AAEE,QAAA,QAAQ,EAAE,KAFZ;AAGE,QAAA,UAAU,EAAE;AAHd,OAXI,EAgBJ;AACE,QAAA,MAAM,EAAE,iBADV;AAEE,QAAA,QAAQ,EAAE,KAFZ;AAGE,QAAA,UAAU,EAAE;AAHd,OAhBI,EAqBJ;AACE,QAAA,MAAM,EAAE,cADV;AAEE,QAAA,QAAQ,EAAE,KAFZ;AAGE,QAAA,UAAU,EAAE;AAHd,OArBI,EA0BJ;AACE,QAAA,MAAM,EAAE,WAAA,CAAA,gBADV;AAEE,QAAA,QAAQ,EAAE,KAFZ;AAGE,QAAA,UAAU,EAAE;AAHd,OA1BI,EA+BJ;AACE,QAAA,MAAM,EAAE,SAAA,CAAA,kBADV;AAEE,QAAA,QAAQ,EAAE,KAFZ;AAGE,QAAA,UAAU,EAAE;AAHd,OA/BI,CADmB;AAsCzB,MAAA,SAAS,EAAE,cAAA,CAAA,YAAA,CAAa,MAtCC;AAuCzB,MAAA;AAvCyB,KAA3B,CADF;AA2CD;;AA/DwD;;AAA3D,OAAA,CAAA,0BAAA,GAAA,0BAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WithdrawSharesFromTreasury = void 0;\nconst mpl_core_1 = require(\"@metaplex-foundation/mpl-core\");\nconst spl_token_1 = require(\"@solana/spl-token\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst VaultProgram_1 = require(\"../VaultProgram\");\nconst Vault_1 = require(\"../accounts/Vault\");\nconst VaultProgram_2 = require(\"../VaultProgram\");\nclass WithdrawSharesFromTreasury extends mpl_core_1.Transaction {\n    constructor(options, params) {\n        super(options);\n        const { vault, vaultAuthority, destination, transferAuthority, fractionTreasury, numberOfShares, } = params;\n        const data = Vault_1.NumberOfShareArgs.serialize({\n            instruction: VaultProgram_1.VaultInstructions.WithdrawSharesFromTreasury,\n            numberOfShares,\n        });\n        this.add(new web3_js_1.TransactionInstruction({\n            keys: [\n                {\n                    pubkey: destination,\n                    isSigner: false,\n                    isWritable: true,\n                },\n                {\n                    pubkey: fractionTreasury,\n                    isSigner: false,\n                    isWritable: true,\n                },\n                {\n                    pubkey: vault,\n                    isSigner: false,\n                    isWritable: false,\n                },\n                {\n                    pubkey: transferAuthority,\n                    isSigner: false,\n                    isWritable: false,\n                },\n                {\n                    pubkey: vaultAuthority,\n                    isSigner: false,\n                    isWritable: true,\n                },\n                {\n                    pubkey: spl_token_1.TOKEN_PROGRAM_ID,\n                    isSigner: false,\n                    isWritable: false,\n                },\n                {\n                    pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\n                    isSigner: false,\n                    isWritable: false,\n                },\n            ],\n            programId: VaultProgram_2.VaultProgram.PUBKEY,\n            data,\n        }));\n    }\n}\nexports.WithdrawSharesFromTreasury = WithdrawSharesFromTreasury;\n//# sourceMappingURL=WithdrawSharesFromTreasury.js.map"]},"metadata":{},"sourceType":"script"}