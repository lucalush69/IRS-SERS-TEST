{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AuctionExtended = exports.AuctionDataExtended = void 0;\n\nconst mpl_core_1 = require(\"@metaplex-foundation/mpl-core\");\n\nconst AuctionProgram_1 = require(\"../AuctionProgram\");\n\nconst buffer_1 = require(\"buffer\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nclass AuctionDataExtended extends mpl_core_1.Borsh.Data {}\n\nexports.AuctionDataExtended = AuctionDataExtended;\nAuctionDataExtended.SCHEMA = AuctionDataExtended.struct([['totalUncancelledBids', 'u64'], ['tickSize', {\n  kind: 'option',\n  type: 'u64'\n}], ['gapTickSizePercentage', {\n  kind: 'option',\n  type: 'u8'\n}], ['instantSalePrice', {\n  kind: 'option',\n  type: 'u64'\n}], ['name', {\n  kind: 'option',\n  type: [32]\n}]]);\n\nclass AuctionExtended extends mpl_core_1.Account {\n  constructor(pubkey, info) {\n    super(pubkey, info);\n\n    if (!this.assertOwner(AuctionProgram_1.AuctionProgram.PUBKEY)) {\n      throw (0, mpl_core_1.ERROR_INVALID_OWNER)();\n    }\n\n    if (!AuctionExtended.isCompatible(this.info.data)) {\n      throw (0, mpl_core_1.ERROR_INVALID_ACCOUNT_DATA)();\n    }\n\n    this.data = AuctionDataExtended.deserialize(this.info.data);\n  }\n\n  static isCompatible(data) {\n    return data.length === AuctionExtended.DATA_SIZE;\n  }\n\n  static getPDA(vault) {\n    return AuctionProgram_1.AuctionProgram.findProgramAddress([buffer_1.Buffer.from(AuctionProgram_1.AuctionProgram.PREFIX), AuctionProgram_1.AuctionProgram.PUBKEY.toBuffer(), new web3_js_1.PublicKey(vault).toBuffer(), buffer_1.Buffer.from(AuctionProgram_1.AuctionProgram.EXTENDED)]);\n  }\n\n}\n\nexports.AuctionExtended = AuctionExtended;\nAuctionExtended.DATA_SIZE = 8 + 9 + 2 + 200;","map":{"version":3,"sources":["../../../src/accounts/AuctionExtended.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,UAAA,GAAA,OAAA,CAAA,+BAAA,CAAA;;AAQA,MAAA,gBAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AACA,MAAA,QAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AACA,MAAA,SAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AASA,MAAa,mBAAb,SAAyC,UAAA,CAAA,KAAA,CAAM,IAA/C,CAAyD;;AAAzD,OAAA,CAAA,mBAAA,GAAA,mBAAA;AACkB,mBAAA,CAAA,MAAA,GAAS,mBAAmB,CAAC,MAApB,CAA2B,CAClD,CAAC,sBAAD,EAAyB,KAAzB,CADkD,EAElD,CAAC,UAAD,EAAa;AAAE,EAAA,IAAI,EAAE,QAAR;AAAkB,EAAA,IAAI,EAAE;AAAxB,CAAb,CAFkD,EAGlD,CAAC,uBAAD,EAA0B;AAAE,EAAA,IAAI,EAAE,QAAR;AAAkB,EAAA,IAAI,EAAE;AAAxB,CAA1B,CAHkD,EAIlD,CAAC,kBAAD,EAAqB;AAAE,EAAA,IAAI,EAAE,QAAR;AAAkB,EAAA,IAAI,EAAE;AAAxB,CAArB,CAJkD,EAKlD,CAAC,MAAD,EAAS;AAAE,EAAA,IAAI,EAAE,QAAR;AAAkB,EAAA,IAAI,EAAE,CAAC,EAAD;AAAxB,CAAT,CALkD,CAA3B,CAAT;;AAelB,MAAa,eAAb,SAAqC,UAAA,CAAA,OAArC,CAAiE;AAG/D,EAAA,WAAA,CAAY,MAAZ,EAAkC,IAAlC,EAA2D;AACzD,UAAM,MAAN,EAAc,IAAd;;AAEA,QAAI,CAAC,KAAK,WAAL,CAAiB,gBAAA,CAAA,cAAA,CAAe,MAAhC,CAAL,EAA8C;AAC5C,YAAM,CAAA,GAAA,UAAA,CAAA,mBAAA,GAAN;AACD;;AAED,QAAI,CAAC,eAAe,CAAC,YAAhB,CAA6B,KAAK,IAAL,CAAU,IAAvC,CAAL,EAAmD;AACjD,YAAM,CAAA,GAAA,UAAA,CAAA,0BAAA,GAAN;AACD;;AAED,SAAK,IAAL,GAAY,mBAAmB,CAAC,WAApB,CAAgC,KAAK,IAAL,CAAU,IAA1C,CAAZ;AACD;;AAEkB,SAAZ,YAAY,CAAC,IAAD,EAAa;AAC9B,WAAO,IAAI,CAAC,MAAL,KAAgB,eAAe,CAAC,SAAvC;AACD;;AAEY,SAAN,MAAM,CAAC,KAAD,EAAoB;AAC/B,WAAO,gBAAA,CAAA,cAAA,CAAe,kBAAf,CAAkC,CACvC,QAAA,CAAA,MAAA,CAAO,IAAP,CAAY,gBAAA,CAAA,cAAA,CAAe,MAA3B,CADuC,EAEvC,gBAAA,CAAA,cAAA,CAAe,MAAf,CAAsB,QAAtB,EAFuC,EAGvC,IAAI,SAAA,CAAA,SAAJ,CAAc,KAAd,EAAqB,QAArB,EAHuC,EAIvC,QAAA,CAAA,MAAA,CAAO,IAAP,CAAY,gBAAA,CAAA,cAAA,CAAe,QAA3B,CAJuC,CAAlC,CAAP;AAMD;;AA5B8D;;AAAjE,OAAA,CAAA,eAAA,GAAA,eAAA;AACkB,eAAA,CAAA,SAAA,GAAY,IAAI,CAAJ,GAAQ,CAAR,GAAY,GAAxB","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AuctionExtended = exports.AuctionDataExtended = void 0;\nconst mpl_core_1 = require(\"@metaplex-foundation/mpl-core\");\nconst AuctionProgram_1 = require(\"../AuctionProgram\");\nconst buffer_1 = require(\"buffer\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nclass AuctionDataExtended extends mpl_core_1.Borsh.Data {\n}\nexports.AuctionDataExtended = AuctionDataExtended;\nAuctionDataExtended.SCHEMA = AuctionDataExtended.struct([\n    ['totalUncancelledBids', 'u64'],\n    ['tickSize', { kind: 'option', type: 'u64' }],\n    ['gapTickSizePercentage', { kind: 'option', type: 'u8' }],\n    ['instantSalePrice', { kind: 'option', type: 'u64' }],\n    ['name', { kind: 'option', type: [32] }],\n]);\nclass AuctionExtended extends mpl_core_1.Account {\n    constructor(pubkey, info) {\n        super(pubkey, info);\n        if (!this.assertOwner(AuctionProgram_1.AuctionProgram.PUBKEY)) {\n            throw (0, mpl_core_1.ERROR_INVALID_OWNER)();\n        }\n        if (!AuctionExtended.isCompatible(this.info.data)) {\n            throw (0, mpl_core_1.ERROR_INVALID_ACCOUNT_DATA)();\n        }\n        this.data = AuctionDataExtended.deserialize(this.info.data);\n    }\n    static isCompatible(data) {\n        return data.length === AuctionExtended.DATA_SIZE;\n    }\n    static getPDA(vault) {\n        return AuctionProgram_1.AuctionProgram.findProgramAddress([\n            buffer_1.Buffer.from(AuctionProgram_1.AuctionProgram.PREFIX),\n            AuctionProgram_1.AuctionProgram.PUBKEY.toBuffer(),\n            new web3_js_1.PublicKey(vault).toBuffer(),\n            buffer_1.Buffer.from(AuctionProgram_1.AuctionProgram.EXTENDED),\n        ]);\n    }\n}\nexports.AuctionExtended = AuctionExtended;\nAuctionExtended.DATA_SIZE = 8 + 9 + 2 + 200;\n//# sourceMappingURL=AuctionExtended.js.map"]},"metadata":{},"sourceType":"script"}