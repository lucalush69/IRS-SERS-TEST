{"ast":null,"code":"\"use strict\";\n\nvar _a;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ClaimBid = exports.ClaimBidArgs = void 0;\n\nconst mpl_core_1 = require(\"@metaplex-foundation/mpl-core\");\n\nconst mpl_auction_1 = require(\"@metaplex-foundation/mpl-auction\");\n\nconst spl_token_1 = require(\"@solana/spl-token\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst MetaplexProgram_1 = require(\"../MetaplexProgram\");\n\nclass ClaimBidArgs extends mpl_core_1.Borsh.Data {\n  constructor() {\n    super(...arguments);\n    this.instruction = 6;\n  }\n\n}\n\nexports.ClaimBidArgs = ClaimBidArgs;\n_a = ClaimBidArgs;\nClaimBidArgs.SCHEMA = _a.struct([['instruction', 'u8']]);\n\nclass ClaimBid extends mpl_core_1.Transaction {\n  constructor(options, params) {\n    super(options);\n    const {\n      store,\n      vault,\n      auction,\n      auctionExtended,\n      auctionManager,\n      bidder,\n      bidderPot,\n      bidderPotToken,\n      acceptPayment,\n      tokenMint\n    } = params;\n    const data = ClaimBidArgs.serialize();\n    this.add(new web3_js_1.TransactionInstruction({\n      keys: [{\n        pubkey: acceptPayment,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: bidderPotToken,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: bidderPot,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: auctionManager,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: auction,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: bidder,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: tokenMint,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: vault,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: store,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: mpl_auction_1.AuctionProgram.PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: web3_js_1.SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: spl_token_1.TOKEN_PROGRAM_ID,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: auctionExtended,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: MetaplexProgram_1.MetaplexProgram.PUBKEY,\n      data\n    }));\n  }\n\n}\n\nexports.ClaimBid = ClaimBid;","map":{"version":3,"sources":["../../../src/transactions/ClaimBid.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ClaimBid = exports.ClaimBidArgs = void 0;\nconst mpl_core_1 = require(\"@metaplex-foundation/mpl-core\");\nconst mpl_auction_1 = require(\"@metaplex-foundation/mpl-auction\");\nconst spl_token_1 = require(\"@solana/spl-token\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst MetaplexProgram_1 = require(\"../MetaplexProgram\");\nclass ClaimBidArgs extends mpl_core_1.Borsh.Data {\n    constructor() {\n        super(...arguments);\n        this.instruction = 6;\n    }\n}\nexports.ClaimBidArgs = ClaimBidArgs;\n_a = ClaimBidArgs;\nClaimBidArgs.SCHEMA = _a.struct([['instruction', 'u8']]);\nclass ClaimBid extends mpl_core_1.Transaction {\n    constructor(options, params) {\n        super(options);\n        const { store, vault, auction, auctionExtended, auctionManager, bidder, bidderPot, bidderPotToken, acceptPayment, tokenMint, } = params;\n        const data = ClaimBidArgs.serialize();\n        this.add(new web3_js_1.TransactionInstruction({\n            keys: [\n                {\n                    pubkey: acceptPayment,\n                    isSigner: false,\n                    isWritable: true,\n                },\n                {\n                    pubkey: bidderPotToken,\n                    isSigner: false,\n                    isWritable: true,\n                },\n                {\n                    pubkey: bidderPot,\n                    isSigner: false,\n                    isWritable: true,\n                },\n                {\n                    pubkey: auctionManager,\n                    isSigner: false,\n                    isWritable: true,\n                },\n                {\n                    pubkey: auction,\n                    isSigner: false,\n                    isWritable: false,\n                },\n                {\n                    pubkey: bidder,\n                    isSigner: false,\n                    isWritable: false,\n                },\n                {\n                    pubkey: tokenMint,\n                    isSigner: false,\n                    isWritable: false,\n                },\n                {\n                    pubkey: vault,\n                    isSigner: false,\n                    isWritable: false,\n                },\n                {\n                    pubkey: store,\n                    isSigner: false,\n                    isWritable: false,\n                },\n                {\n                    pubkey: mpl_auction_1.AuctionProgram.PUBKEY,\n                    isSigner: false,\n                    isWritable: false,\n                },\n                {\n                    pubkey: web3_js_1.SYSVAR_CLOCK_PUBKEY,\n                    isSigner: false,\n                    isWritable: false,\n                },\n                {\n                    pubkey: spl_token_1.TOKEN_PROGRAM_ID,\n                    isSigner: false,\n                    isWritable: false,\n                },\n                {\n                    pubkey: auctionExtended,\n                    isSigner: false,\n                    isWritable: false,\n                },\n            ],\n            programId: MetaplexProgram_1.MetaplexProgram.PUBKEY,\n            data,\n        }));\n    }\n}\nexports.ClaimBid = ClaimBid;\n//# sourceMappingURL=ClaimBid.js.map"]},"metadata":{},"sourceType":"script"}